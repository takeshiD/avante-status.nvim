local M = {}
M.setup = function(opts)
    vim.print("Hello avante-status Sayho!!!")
end
return M



-- local Path = require("plenary.path")
--
-- ---環境変数envnameが存在する場合はtrue, しない場合はfalseを返す
-- ---@param envname string
-- ---@return boolean
-- local exist_envname = function(envname)
--     return vim.fn.getenv(envname) ~= vim.NIL
-- end
--
-- ---Pathが存在する場合はtrue, しない場合はfalseを返す
-- ---@param path string
-- ---@return boolean
-- local exist_path = function(path)
--     return Path:new(vim.fn.expand(path)):exists()
-- end
--
-- ---condがtrueの場合Tを返す condがfalseの場合Fを返す
-- ---@param cond boolean
-- ---@param T any
-- ---@param F any
-- ---@return any
-- local ternary = function(cond, T, F)
--     if cond then return T else return F end
-- end
--
-- ---述語predがtrueとなるlistの最初の要素を返す
-- ---全ての要素がfalseの場合はnilを返す
-- ---@generic T
-- ---@param pred fun(item: T): boolean
-- ---@param list T[]
-- ---@return T | nil
-- local member_if = function(pred, list)
--     for _, v in ipairs(list) do
--         if pred(v) then
--             return v
--         end
--     end
--     return nil
-- end
--
-- ---環境変数envnameが存在する場合は格納されている値を返す
-- ---存在しない場合はFを返す
-- ---@param envname string
-- ---@param F string | nil
-- ---@return string
-- local getenv_if = function(envname, F)
--     F = F or nil
--     return ternary(exist_envname(envname), vim.fn.getenv(envname), F)
-- end
--
-- local Highlights = {
--     AZURE   = { name = "AvanteIconAzure", fg = "#008ad7" },
--     CLAUDE = { name = "AvanteIconClaude", fg = "#d97757" },
--     OPENAI = { name = "AvanteIconOpenAI", fg = "#76a89c" },
--     COPILOT = { name = "AvanteIconCopilot", link = "Normal" },
--     GEMINI = { name = "AvanteIconGemini", fg = "#3a92db" },
--     COHERE = { name = "AvanteIconCohere", fg = "#d2a1de" },
-- }
--
-- local function has_set_colors(hl_group)
--   local hl = vim.api.nvim_get_hl(0, { name = hl_group })
--   return next(hl) ~= nil
-- end
--
-- local setup_highlight = function()
--     vim
--       .iter(Highlights)
--       :filter(function(k, _)
--         return k:match("^%u+_") or k:match("^%u+$")
--       end)
--       :each(function(_, hl)
--         if not has_set_colors(hl.name) then
--           vim.api.nvim_set_hl(0, hl.name, { fg = hl.fg or nil, bg = hl.bg or nil, link = hl.link or nil })
--         end
--       end)
-- end
--
-- local provider_value_map = {
--     azure = {
--         type = "envvar",
--         value = "AZURE_OPENAI_API_KEY",
--         icon = " ",
--         highlight = "AvanteIconAzure",
--         name = "Azure",
--     },
--     claude = {
--         type = "envvar",
--         value = "ANTHROPIC_API_KEY",
--         icon = "󰛄 ",
--         highlight = "AvanteIconClaude",
--         name = "Claude",
--     },
--     openai = {
--         type = "envvar",
--         value = "OPENAI_API_KEY",
--         icon = " ",
--         highlight = "AvanteIconOpenAI",
--         name = "OpenAI",
--     },
--     copilot = {
--         type = "path",
--         value = vim.fn.stdpath("data") .. "/avante/github-copilot.json",
--         icon = " ",
--         highlight = "AvanteIconCopilot",
--         name = "Copilot",
--     },
--     gemini = {
--         type = "envvar",
--         value = "GEMINI_API_KEY",
--         icon = "󰫢 ",
--         highlight = "AvanteIconGemini",
--         name = "Gemini",
--     },
--     cohere = {
--         type = "envvar",
--         value = "CO_API_KEY",
--         icon = "󰺠 ",
--         highlight = "AvanteIconCohere",
--         name = "Cohere",
--     }
-- }
--
-- ---providersの中で最初に環境変数が設定されているproviderを返す
-- ---先頭に設定されているproviderが優先されるためリストを並べ替えて優先度を設定する
-- ---@param providers string[]
-- ---@param provider_type string "chat" | "suggestions"
-- ---@return string
-- local get_provider = function(providers, provider_type)
--     for _, provider in ipairs(providers) do
--         local p = provider_value_map[provider]
--         if p.type == "envvar" then
--             provider = ternary(exist_envname(p.value), provider, nil)
--         elseif p.type == "path" then
--             provider = ternary(exist_path(p.value), provider, nil)
--         end
--         if provider ~= nil then
--             local msg_head = "[avante.nvim] not set provider-type: "
--             if provider_type == "chat" then
--                 msg_head = "[avante.nvim] chat provider: "
--             elseif provider_type == "suggestions" then
--                 msg_head = "[avante.nvim] suggestions provider: "
--             end
--             local msg_icon = p.icon
--             local msg_provider = p.name
--             vim.api.nvim_echo({
--                 {msg_head, nil},
--                 {msg_icon, p.highlight},
--                 {msg_provider, p.highlight},
--             }, true, {})
--             return tostring(provider)
--         end
--     end
--     error("The provider for which the api-key is set cannot be obtained.")
--     return ""
-- end
--
-- ---providersの中で最初に環境変数が設定されているproviderを返す
-- ---先頭に設定されているproviderが優先されるためリストを並べ替えて優先度を設定する
-- ---@param providers string[]
-- ---@return string
-- local get_chat_provider = function(providers)
--     setup_highlight()
--     return get_provider(providers, "chat")
-- end
--
-- ---providersの中で最初に環境変数が設定されているproviderを返す, copilotは別の処理
-- ---先頭に設定されているproviderが優先されるためリストを並べ替えて優先度を設定する
-- ---@param providers string[]
-- ---@return string
-- local get_suggestions_provider = function(providers)
--     return get_provider(providers, "suggestions")
-- end
